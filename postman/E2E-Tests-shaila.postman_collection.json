{
	"info": {
		"_postman_id": "2ab3668c-b67b-45b7-b8c7-3e3fca6a47fd",
		"name": "E2E-Tests-shaila",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6599368",
		"_collection_link": "https://red-robot-859727.postman.co/workspace/Team-Workspace~22b22af2-63f7-47fb-8025-076c959ef98e/collection/6599368-2ab3668c-b67b-45b7-b8c7-3e3fca6a47fd?action=share&source=collection_link&creator=6599368"
	},
	"item": [
		{
			"name": "Test 1: petición a las 10:00 del día 14 del producto 35455   para la brand 1 (ZARA)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain a prices 'object' in the response\", function () {\r",
							"    pm.expect(response.price).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Should contain the correct productId in the response\", function () {\r",
							"    pm.expect(response.price.productId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.productId).to.eql(35455);\r",
							"});\r",
							"pm.test(\"Should contain the correct brandId in the response\", function () {\r",
							"    pm.expect(response.price.brandId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.brandId).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct priceList in the response\", function () {\r",
							"    pm.expect(response.price.priceList).to.be.a(\"number\");\r",
							"    pm.expect(response.price.priceList).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct dates in the response\", function () {\r",
							"    const startDate = pm.response.json().price.startDate;\r",
							"    const endDate = pm.response.json().price.endDate;\r",
							"\r",
							"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/;\r",
							"\r",
							"    pm.expect(startDate).to.match(iso8601Regex);\r",
							"    pm.expect(startDate).to.eql(\"2020-06-14T00:00:00\");\r",
							"\r",
							"    pm.expect(endDate).to.match(iso8601Regex);\r",
							"    pm.expect(endDate).to.eql(\"2020-12-31T23:59:59\");\r",
							"});\r",
							"pm.test(\"Should contain the correct price in the response\", function () {\r",
							"    pm.expect(response.price.price).to.be.a(\"number\");\r",
							"    pm.expect(response.price.price).to.eql(35.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{URL}}/prices?brandId=1&productId=35455&applicationDate=2020-06-14%2010%3A00%3A00",
					"host": [
						"{{URL}}"
					],
					"path": [
						"prices"
					],
					"query": [
						{
							"key": "brandId",
							"value": "1"
						},
						{
							"key": "productId",
							"value": "35455"
						},
						{
							"key": "applicationDate",
							"value": "2020-06-14%2010%3A00%3A00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 2: petición a las 16:00 del día 14 del producto 35455   para la brand 1 (ZARA)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain a prices 'object' in the response\", function () {\r",
							"    pm.expect(response.price).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Should contain the correct productId in the response\", function () {\r",
							"    pm.expect(response.price.productId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.productId).to.eql(35455);\r",
							"});\r",
							"pm.test(\"Should contain the correct brandId in the response\", function () {\r",
							"    pm.expect(response.price.brandId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.brandId).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct priceList in the response\", function () {\r",
							"    pm.expect(response.price.priceList).to.be.a(\"number\");\r",
							"    pm.expect(response.price.priceList).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct dates in the response\", function () {\r",
							"    const startDate = pm.response.json().price.startDate;\r",
							"    const endDate = pm.response.json().price.endDate;\r",
							"\r",
							"    const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/;\r",
							"\r",
							"    pm.expect(startDate).to.match(regex);\r",
							"    pm.expect(startDate).to.eql(\"2020-06-14T15:00:00\");\r",
							"    pm.expect(endDate).to.match(regex);\r",
							"    pm.expect(endDate).to.eql(\"2020-06-14T18:30:00\");\r",
							"\r",
							"});\r",
							"pm.test(\"Should contain the correct price in the response\", function () {\r",
							"    pm.expect(response.price.price).to.be.a(\"number\");\r",
							"    pm.expect(response.price.price).to.eql(25.45);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{URL}}/prices?brandId=1&productId=35455&applicationDate=2020-06-14%2016%3A00%3A00",
					"host": [
						"{{URL}}"
					],
					"path": [
						"prices"
					],
					"query": [
						{
							"key": "brandId",
							"value": "1"
						},
						{
							"key": "productId",
							"value": "35455"
						},
						{
							"key": "applicationDate",
							"value": "2020-06-14%2016%3A00%3A00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 3: petición a las 21:00 del día 14 del producto 35455   para la brand 1 (ZARA)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Should contain a prices 'object' in the response\", function () {\r",
							"    pm.expect(response.price).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct productId in the response\", function () {\r",
							"    pm.expect(response.price.productId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.productId).to.eql(35455);\r",
							"});\r",
							"pm.test(\"Should contain the correct brandId in the response\", function () {\r",
							"    pm.expect(response.price.brandId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.brandId).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct priceList in the response\", function () {\r",
							"    pm.expect(response.price.priceList).to.be.a(\"number\");\r",
							"    pm.expect(response.price.priceList).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct dates in the response\", function () {\r",
							"    const startDate = pm.response.json().price.startDate;\r",
							"    const endDate = pm.response.json().price.endDate;\r",
							"\r",
							"    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/;\r",
							"\r",
							"    pm.expect(startDate).to.match(iso8601Regex);\r",
							"    pm.expect(startDate).to.eql(\"2020-06-14T00:00:00\");\r",
							"\r",
							"    pm.expect(endDate).to.match(iso8601Regex);\r",
							"    pm.expect(endDate).to.eql(\"2020-12-31T23:59:59\");\r",
							"});\r",
							"pm.test(\"Should contain the correct price in the response\", function () {\r",
							"    pm.expect(response.price.price).to.be.a(\"number\");\r",
							"    pm.expect(response.price.price).to.eql(35.5);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{URL}}/prices?brandId=1&productId=35455&applicationDate=2020-06-14%2021%3A00%3A00",
					"host": [
						"{{URL}}"
					],
					"path": [
						"prices"
					],
					"query": [
						{
							"key": "brandId",
							"value": "1"
						},
						{
							"key": "productId",
							"value": "35455"
						},
						{
							"key": "applicationDate",
							"value": "2020-06-14%2021%3A00%3A00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 4: petición a las 10:00 del día 15 del producto 35455   para la brand 1 (ZARA)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain a prices 'object' in the response\", function () {\r",
							"    pm.expect(response.price).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Should contain the correct productId in the response\", function () {\r",
							"    pm.expect(response.price.productId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.productId).to.eql(35455);\r",
							"});\r",
							"pm.test(\"Should contain the correct brandId in the response\", function () {\r",
							"    pm.expect(response.price.brandId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.brandId).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct priceList in the response\", function () {\r",
							"    pm.expect(response.price.priceList).to.be.a(\"number\");\r",
							"    pm.expect(response.price.priceList).to.eql(3);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct dates in the response\", function () {\r",
							"    const startDate = pm.response.json().price.startDate;\r",
							"    const endDate = pm.response.json().price.endDate;\r",
							"\r",
							"    const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/;\r",
							"\r",
							"    pm.expect(startDate).to.match(regex);\r",
							"    pm.expect(startDate).to.eql(\"2020-06-15T00:00:00\");\r",
							"    pm.expect(endDate).to.match(regex);\r",
							"    pm.expect(endDate).to.eql(\"2020-06-15T11:00:00\");\r",
							"});\r",
							"pm.test(\"Should contain the correct price in the response\", function () {\r",
							"    pm.expect(response.price.price).to.be.a(\"number\");\r",
							"    pm.expect(response.price.price).to.eql(30.5);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{URL}}/prices?brandId=1&productId=35455&applicationDate=2020-06-15%2010%3A00%3A00",
					"host": [
						"{{URL}}"
					],
					"path": [
						"prices"
					],
					"query": [
						{
							"key": "brandId",
							"value": "1"
						},
						{
							"key": "productId",
							"value": "35455"
						},
						{
							"key": "applicationDate",
							"value": "2020-06-15%2010%3A00%3A00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 5: petición a las 21:00 del día 16 del producto 35455 para la brand 1 (ZARA)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Should contain a prices 'object' in the response\", function () {\r",
							"    pm.expect(response.price).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct productId in the response\", function () {\r",
							"    pm.expect(response.price.productId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.productId).to.eql(35455);\r",
							"});\r",
							"pm.test(\"Should contain the correct brandId in the response\", function () {\r",
							"    pm.expect(response.price.brandId).to.be.a(\"number\");\r",
							"    pm.expect(response.price.brandId).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct priceList in the response\", function () {\r",
							"    pm.expect(response.price.priceList).to.be.a(\"number\");\r",
							"    pm.expect(response.price.priceList).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain the correct dates in the response\", function () {\r",
							"    const startDate = pm.response.json().price.startDate;\r",
							"    const endDate = pm.response.json().price.endDate;\r",
							"\r",
							"    const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/;\r",
							"\r",
							"    pm.expect(startDate).to.match(regex);\r",
							"    pm.expect(startDate).to.eql(\"2020-06-15T16:00:00\");\r",
							"    pm.expect(endDate).to.match(regex);\r",
							"    pm.expect(endDate).to.eql(\"2020-12-31T23:59:59\");\r",
							"\r",
							"});\r",
							"pm.test(\"Should contain the correct price in the response\", function () {\r",
							"    pm.expect(response.price.price).to.be.a(\"number\");\r",
							"    pm.expect(response.price.price).to.eql(38.95);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{URL}}/prices?brandId=1&productId=35455&applicationDate=2020-06-16%2021%3A00%3A00",
					"host": [
						"{{URL}}"
					],
					"path": [
						"prices"
					],
					"query": [
						{
							"key": "brandId",
							"value": "1"
						},
						{
							"key": "productId",
							"value": "35455"
						},
						{
							"key": "applicationDate",
							"value": "2020-06-16%2021%3A00%3A00"
						}
					]
				}
			},
			"response": []
		}
	]
}